
#define SQLOK(rc) ((SQL_SUCCESS==rc) || (SQL_SUCCESS_WITH_INFO==rc))

SQLHENV g_henv;
SQLHDBC g_hdbc;
BOOL g_fConn;

const TCHAR DB_NAME[]=TEXT("DATABASE=testdb");
const TCHAR SERVER_NAME[]=TEXT("SERVER=MCJH-SERVER;Trusted Connection=True");
const TCHAR DRIVER_NAME[]=TEXT("DRIVER={SQL Server}");

BOOL ConnectDB();
int SQLErrorHandler(short fType, SQLHANDLE handle, int iRec=1);
BOOL InitSQL();
BOOL FreeSQL();

typedef struct tagRECORD
{
	int F[8];
	LONG cb[8];
}RECORD,* LPRECORD;

const int ROW_ARRAY_SIZE=10000;

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
 	if(!InitSQL()) return -1;
	if(!ConnectDB()) return SQLErrorHandler(SQL_HANDLE_DBC, g_hdbc);

	SQLHSTMT h;
	SQLRETURN rc;
	short iRowStatusPtr[ROW_ARRAY_SIZE]={0};
	LPRECORD pRecords=NULL;
	UINT uRowsFetched=0;
	int i,j=0;
	LONG nCount=0;
	LONG nTotalCount=0;
	TCHAR szText[MAX_PATH]=TEXT("");
	TCHAR szSQL[512]=TEXT("INSERT INTO BULK_TEST "
		"(F1,F2,F3,F4,F5,F6,F7,F8)"
		" VALUES(?,?,?,?,?,?,?,?)");
	DWORD dwTime;

	rc=SQLAllocHandle(SQL_HANDLE_STMT, g_hdbc, &h);
	if(!SQLOK(rc))
	{
		SQLErrorHandler(SQL_HANDLE_DBC, g_hdbc);
		goto Label_Exit;
	}

	//** Set row-wise binding
/*	rc=SQLSetStmtAttr(h, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)sizeof(RECORD), SQL_IS_INTEGER);
	if(!SQLOK(rc)) SQLErrorHandler(SQL_HANDLE_STMT, h, 1);
	rc=SQLSetStmtAttr(h, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)ROW_ARRAY_SIZE, SQL_IS_INTEGER);
	if(!SQLOK(rc)) SQLErrorHandler(SQL_HANDLE_STMT, h, 1);
	rc=SQLSetStmtAttr(h, SQL_ATTR_ROW_STATUS_PTR, (SQLPOINTER)iRowStatusPtr, SQL_IS_INTEGER);
	if(!SQLOK(rc)) SQLErrorHandler(SQL_HANDLE_STMT, h, 1);
	rc=SQLSetStmtAttr(h, SQL_ATTR_ROWS_FETCHED_PTR, (SQLPOINTER)&uRowsFetched, SQL_IS_INTEGER);
	if(!SQLOK(rc)) SQLErrorHandler(SQL_HANDLE_STMT, h, 1);
*/
	rc=SQLSetStmtAttr(h, SQL_ATTR_PARAM_BIND_TYPE, (SQLPOINTER)sizeof(RECORD), SQL_IS_INTEGER);
	rc=SQLSetStmtAttr(h, SQL_ATTR_PARAMSET_SIZE, (SQLPOINTER)ROW_ARRAY_SIZE, SQL_IS_INTEGER);
	rc=SQLSetStmtAttr(h, SQL_ATTR_PARAM_STATUS_PTR, iRowStatusPtr, 0);
	rc=SQLSetStmtAttr(h, SQL_ATTR_PARAMS_PROCESSED_PTR, &uRowsFetched, 0);

	pRecords=(LPRECORD)LocalAlloc(LPTR, sizeof(RECORD)*ROW_ARRAY_SIZE);
	if(NULL==pRecords) return GetLastError();

	SQLSetConnectAttr(g_hdbc, SQL_ATTR_AUTOCOMMIT, (SQLPOINTER)SQL_AUTOCOMMIT_OFF, 0);

	dwTime=GetTickCount();

	rc=SQLPrepare(h, (SQLTCHAR *)szSQL, SQL_NTS);
	if(!SQLOK(rc))
	{
		SQLErrorHandler(SQL_HANDLE_STMT, h);
		goto Label_Exit;
	}

	for(i=0;i<8;i++)
	{
		SQLBindParameter(h, i+1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, 10, 0, &pRecords[0].F[i], 0, &pRecords[0].cb[i]);
	}

	for(j=0;j<10;j++)
	{
		for(i=0;i<ROW_ARRAY_SIZE;i++)
		{
			RECORD &data=pRecords[i];
			data.F[0]=j*ROW_ARRAY_SIZE+i*1;
			data.F[1]=j*ROW_ARRAY_SIZE+i*2;
			data.F[2]=j*ROW_ARRAY_SIZE+i*3;
			data.F[3]=j*ROW_ARRAY_SIZE+i*4;
			data.F[4]=j*ROW_ARRAY_SIZE+i*5;
			data.F[5]=j*ROW_ARRAY_SIZE+i*6;
			data.F[6]=j*ROW_ARRAY_SIZE+i*7;
			data.F[7]=j*ROW_ARRAY_SIZE+i*8;

			data.cb[0]=4;
			data.cb[1]=4;
			data.cb[2]=4;
			data.cb[3]=4;
			data.cb[4]=4;
			data.cb[5]=4;
			data.cb[6]=4;
			data.cb[7]=4;
		}
		rc=SQLExecute(h);
		if(!SQLOK(rc))
		{
			SQLErrorHandler(SQL_HANDLE_STMT, h);
			goto Label_Exit;
		}	
	//	rc=SQLRowCount(h, &nCount);
	//	if(SQLOK(rc))
		{
			nTotalCount+=uRowsFetched;
			uRowsFetched=0;
		}
	}

	SQLEndTran(SQL_HANDLE_DBC, g_hdbc, SQL_COMMIT);
	dwTime=GetTickCount()-dwTime;
	wsprintf(szText, TEXT("%ld rows inserted.\r\nTime Ellipsed=%ldms."), nTotalCount, dwTime);
	MessageBox(NULL, szText, 0, 0);
Label_Exit:
	if(NULL!=pRecords) LocalFree(pRecords);
	if(NULL!=h) SQLFreeHandle(SQL_HANDLE_STMT, h);
	FreeSQL();
	return 0;
}
CREATE [ UNIQUE ] [ CLUSTERED | NONCLUSTERED ] INDEX index_name
    ON { table | view } ( column [ ASC | DESC ] [ ,...n ] ) 
[ WITH < index_option > [ ,...n] ] 
[ ON filegroup ]

< index_option > ::= 
    { PAD_INDEX |
        FILLFACTOR = fillfactor |
        IGNORE_DUP_KEY |
        DROP_EXISTING |
    STATISTICS_NORECOMPUTE |
    SORT_IN_TEMPDB  
}

DROP INDEX table.index;  

执行相关信息
SET STATISTICS IO ON 
set statistics time on
set statistics profile on

分页
select * from (  
select b.*,row_number() over(order by fid) as num from [sde].[sde].[f15] f 
inner join sde.sde.[用地_LG] b on f.fid=b.Shape
) t where t.num between 0 and 14  


@@spid获取当前连接id

[master].[sys].[dm_exec_sessions]表中获取clientprocessid
select * from  [master].[sys].[dm_exec_sessions] where session_id = @@SPID

区分大小写
Create Table t(name nvarchar(20) Latin1_General_BIN)


Collate Database_Default

select IS_SRVROLEMEMBER('dbcreator','sde') --判断是否有创建数据库的权限

SELECT SCOPE_IDENTITY(); 获取Last_insert_id


获取模型贴图以及renderindex，直接用bindcol，如果发现缓存区不够长，重新分配缓存区，然后重新请求
其他情况下获取数据，如果blob都在最后，就前面用bindcol，后面getdata，如果中间有blob字段，就去哪不getdata



CREATE TABLE ##SDE_12684_297_sde (keycol INTEGER)

创建数据库之后要创建schema
CREATE SCHEMA fdb



select @@SPID,        --返回当前连接的会话ID:SPID  
 
       HOST_ID(),     --客户端连接的进程ID:936         
       HOST_NAME(),   --客户端连接的主机名称:PC0627JVC  


获取当前时间 select getdate();
插入当前时间 now()


获取所有数据库 select * from sys.databases



获取索引信息
SELECT 
    OBJECT_NAME(IXS.OBJECT_ID)  AS  [TABLE_NAME],  
    IXS.INDEX_ID                AS  [INDEX_ID],  
    IXS.NAME                    AS  [INDEX_NAME],  
    C.NAME                      AS  [COLUMN_NAME]
    
FROM 
    SYS.INDEXES IXS  
INNER JOIN 
    SYS.INDEX_COLUMNS   IXCS  
ON 
    IXS.OBJECT_ID=IXCS.OBJECT_ID  
    AND 
    IXS.INDEX_ID = IXCS.INDEX_ID  
INNER   JOIN 
    SYS.COLUMNS C  
ON 
    IXS.OBJECT_ID=C.OBJECT_ID  
    AND 
    IXCS.COLUMN_ID=C.COLUMN_ID  
where IXS.OBJECT_ID = object_id('sde.sde.f10')
 
ORDER BY    IXS.OBJECT_ID, IXCS.INDEX_ID, IXCS.IS_INCLUDED_COLUMN, IXCS.COLUMN_ID    


获取主键列
select '表名'=d.name ,'主键名'=a.name,'字段名'=c.name  
from sys.indexes a join sys.index_columns b 
on a.object_id=b.object_id and a.index_id=b.index_id 
join sys.columns c on a.object_id=c.object_id and
 c.column_id=b.column_id 
join sys.objects d on d.object_id=c.object_id 
where a.is_primary_key=1 and d.object_id = object_id('sde.sde.SDE_column_registry')


CREATE [UNIQUE] [CLUSTERED|NONCLUSTERED] 
    INDEX   index_name
     ON table_name (column_name…)
      [WITH FILLFACTOR=x]
       UNIQUE表示唯一索引，可选
       CLUSTERED、NONCLUSTERED表示聚集索引还是非聚集索引，可选
       FILLFACTOR表示填充因子，指定一个0到100之间的值，该值指示索引页填满的空间所占的百分比



i表 
CREATE TABLE i99
(
type int not null ,
start_id int not null ,
num_ids int not null,
last_id int not null ,
primary key(type,start_id,num_ids)
)

CREATE PROCEDURE [sde].[i98_get_ids]
@type integer,
@num_requested_ids integer,
@start_id integer OUTPUT,
@num_obtained_ids integer OUTPUT AS SET NOCOUNT ON
DECLARE @ret_val INTEGER
BEGIN
	/* 如果请求的id个数小于0，直接返回好了 */
	IF (@num_requested_ids <= 0)
		BEGIN
			SET @ret_val = -1;
		END
	ELSE
		BEGIN
			DECLARE I_cursor CURSOR FOR
			SELECT start_id, num_ids FROM SDE.dbo.i99 WITH (tablockx, holdlock)
			WHERE type = @type ORDER BY num_ids DESC  FOR UPDATE 

			BEGIN TRAN id_tran
			OPEN I_cursor
			FETCH NEXT FROM I_cursor INTO @start_id, @num_obtained_ids
			/* @num_obtained_ids说明是在主干上分配ids，直接更新主干信息即可 */
			IF (@num_obtained_ids = -1)
				BEGIN
					SET @num_obtained_ids = @num_requested_ids
					UPDATE SDE.dbo.i99
					SET start_id = start_id + @num_obtained_ids,
					last_id =  @start_id
					WHERE CURRENT OF I_cursor
				END
			ELSE
				BEGIN
					IF (@num_requested_ids = 1) AND (@num_obtained_ids > 1)
						BEGIN
							SET @num_obtained_ids = 1
							UPDATE SDE.dbo.i99 SET start_id = start_id + 1,
							num_ids =  num_ids - 1 WHERE CURRENT OF I_cursor
						END
					ELSE
						BEGIN
							/* 把这个片段的ids都返回，虽然可能会出现请求100个，返回1000个的情况 */
							DELETE FROM SDE.dbo.i99 WHERE CURRENT OF I_cursor
						END
					END
				END
			CLOSE I_cursor
			COMMIT TRAN id_tran 
			DEALLOCATE I_cursor
			SET @ret_val = 0;
		END
  RETURN @ret_val





CREATE PROCEDURE [sde].[i98_return_ids]
@type integer,
@start_id integer,
@num_ids integer
AS SET NOCOUNT ON
BEGIN
  DECLARE @last_id integer
  DECLARE @fetched_base_id integer
  BEGIN TRAN id_tran
  SELECT @last_id = last_id, @fetched_base_id = start_id
    FROM SDE.dbo.i99 WITH (tablockx, holdlock)
    WHERE num_ids = -1 AND type = @type
  IF (@start_id + @num_ids) = @fetched_base_id
  BEGIN
    /*中间没人使用过，就直接返回到主干上即可*/
    UPDATE SDE.dbo.i99 SET start_id = @start_id
       WHERE num_ids = -1 AND type = @type
  END
  ELSE
  BEGIN
    /* 插入一个新的片段 */
    INSERT INTO SDE.dbo.i99(type,start_id, num_ids,last_id)
      VALUES (@type,@start_id, @num_ids,0)
  END
  COMMIT TRAN id_tran 
END
